# Continuous Integration Workflow
name: CI

# Triggers the workflow on push or pull request events
on: [push, pull_request]

# Default settings for all jobs and steps
defaults:
  run:
    shell: bash # Default shell unless overridden

env:
# Default build type (can be overridden by matrix, but useful as a fallback)
# BUILD_TYPE: RelWithDebInfo # Not strictly needed as matrix defines CMAKE_BUILD_TYPE explicitly
# Global environment variables can go here

jobs:
  build:
    # Job name dynamically generated from the matrix values
    name: ${{ matrix.platform.name }} ${{ matrix.config.name }}
    # Runner environment based on the platform matrix
    runs-on: ${{ matrix.platform.os }}
    # Docker container, if specified in the platform matrix
    container: ${{ matrix.platform.container }}

    # Per-job default settings
    defaults:
      run:
        # Override shell for specific platforms (like MSYS2) if needed
        shell: ${{ matrix.platform.shell || 'bash' }}

    strategy:
      # Prevent canceling all jobs if one fails
      fail-fast: false
      # Define the build matrix
      matrix:
        platform:
          # --- Windows Platforms ---
          - { name: Windows VS2019, os: windows-2019 }
          - { name: Windows VS2022, os: windows-2022 }
          # Note: MSYS2 uses a specific shell invocation
          - { name: Windows MSYS2, os: windows-2022, shell: 'msys2 {0}' }
          # --- Linux Platforms ---
          - { name: Linux GCC, os: ubuntu-latest }
          - { name: Linux Clang, os: ubuntu-latest, flags: -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ }
          - { name: Ubuntu 22.04, os: ubuntu-22.04 }
          # Container-based Linux distributions
          - { name: Fedora, os: ubuntu-latest, container: "fedora:latest" }
          - { name: ArchLinux, os: ubuntu-latest, container: "archlinux:latest" }
          # --- macOS Platform ---
          - { name: macOS, os: macos-latest }

        config:
          # --- Simplified Configurations ---
          # 1. Shared Debug (for debug symbols and assertion checks, shared linking)
          - { name: Shared Debug, flags: -DBUILD_SHARED_LIBS=TRUE -DCMAKE_BUILD_TYPE=Debug }
          # 2. Shared RelWithDebInfo (optimized with debug info, shared linking, LTO enabled where applicable)
          - { name: Shared RelWithDebInfo, flags: -DBUILD_SHARED_LIBS=TRUE -DCMAKE_BUILD_TYPE=RelWithDebInfo }
          # 3. Static RelWithDebInfo (optimized with debug info, static linking, LTO enabled where applicable)
          - { name: Static RelWithDebInfo, flags: -DBUILD_SHARED_LIBS=FALSE -DCMAKE_BUILD_TYPE=RelWithDebInfo }

        # No 'exclude' needed now as the matrix only generates desired combinations

    steps:
      # 1. Checkout code
      - name: Checkout
        uses: actions/checkout@v4

      # 2. Setup MSYS2 environment if applicable
      - name: Setup MSYS2
        if: contains(matrix.platform.name, 'MSYS2')
        uses: msys2/setup-msys2@v2
        with:
          msystem: mingw64 # Use the MinGW-w64 environment
          update: true     # Update MSYS2 packages
          install: >-      # Install necessary build tools and dependencies
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-ninja
            git

      # 3. Setup ccache for faster C/C++ compilation (if not in a container or MSYS2)
      # ccache is generally not used inside containers unless explicitly set up there
      # MSYS2 has its own package management, using ccache might need specific setup
      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2.17
        if: matrix.platform.container == '' && !contains(matrix.platform.name, 'MSYS2')
        with:
          # Unique key for caching, including config name
          key: ${{ runner.os }}-${{ matrix.platform.name }}-${{ matrix.config.name }}-ccache-${{ github.ref }}-${{ github.sha }}
          # Fallback keys for cache restoration
          restore-keys: |
            ${{ runner.os }}-${{ matrix.platform.name }}-${{ matrix.config.name }}-ccache-${{ github.ref }}-
            ${{ runner.os }}-${{ matrix.platform.name }}-${{ matrix.config.name }}-ccache-
          # Maximum cache size
          max-size: 1G

      # 4. Install Dependencies (specific to OS/Container)
      - name: Install Ubuntu Dependencies
        if: runner.os == 'Linux' && matrix.platform.container == ''
        run: sudo apt-get update && sudo apt-get install -y libxrandr-dev libxcursor-dev libxi-dev libudev-dev libflac-dev libvorbis-dev libgl1-mesa-dev libegl1-mesa-dev libfreetype-dev

      - name: Install MSYS2 Dependencies (Example - Adapt as needed)
        if: contains(matrix.platform.name, 'MSYS2')
        run: |
          # Install library dependencies using pacman within the MSYS2 shell
          pacman -S --noconfirm --needed \
            mingw-w64-x86_64-sfml \
            mingw-w64-x86_64-openal
          # Add other dependencies here

      - name: Install Fedora Dependencies
        if: matrix.platform.container == 'fedora:latest'
        run: |
          dnf install -y gcc gcc-c++ cmake make git \
            libXrandr-devel libXcursor-devel libXi-devel systemd-devel \
            flac-devel libvorbis-devel mesa-libGL-devel mesa-libEGL-devel freetype-devel

      - name: Install ArchLinux Dependencies
        if: matrix.platform.container == 'archlinux:latest'
        run: |
          pacman -Syu --noconfirm
          pacman -S --noconfirm base-devel cmake git \
            libxrandr libxcursor libxi systemd-libs \
            flac libvorbis mesa freetype2

      # 5. Configure CMake Build (Conditional Logic)

      # 5a. Configure MSYS2 (No LTO, Ninja generator)
      - name: Configure MSYS2 Build
        if: contains(matrix.platform.name, 'MSYS2')
        run: |
          # PATH should be correctly set by setup-msys2 action
          # Explicitly use Ninja generator as it's installed
          # Pass matrix flags (contains BUILD_SHARED_LIBS and CMAKE_BUILD_TYPE)
          # Add minimum policy version
          cmake -G "Ninja" -B build ${{ matrix.config.flags }} \
            -DCMAKE_POLICY_VERSION_MINIMUM=3.5
            # Compilers are usually picked up from PATH correctly now
            # -DCMAKE_C_COMPILER=/mingw64/bin/gcc.exe \
            # -DCMAKE_CXX_COMPILER=/mingw64/bin/g++.exe

      # 5b. Configure Linux Host Builds (Use ccache, add LTO for RelWithDebInfo)
      - name: Configure Linux Host Build
        if: runner.os == 'Linux' && matrix.platform.container == '' && !contains(matrix.platform.name, 'MSYS2') # Exclude MSYS2 again just to be safe
        run: |
          cmake_extra_flags=""
          # Add LTO only for RelWithDebInfo builds
          if [[ "${{ matrix.config.name }}" == *"RelWithDebInfo"* ]]; then
            cmake_extra_flags="$cmake_extra_flags -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON"
          fi
          
          # Add ccache launchers
          cmake_extra_flags="$cmake_extra_flags -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache"
          
          # Base command
          cmake -B build ${{ matrix.platform.flags }} ${{ matrix.config.flags }} ${cmake_extra_flags} \
            -DCMAKE_POLICY_VERSION_MINIMUM=3.5

      # 5c. Configure Linux Container Builds (No ccache, add LTO for RelWithDebInfo)
      - name: Configure Linux Container Build
        if: runner.os == 'Linux' && matrix.platform.container != ''
        run: |
          cmake_extra_flags=""
          # Add LTO only for RelWithDebInfo builds
          if [[ "${{ matrix.config.name }}" == *"RelWithDebInfo"* ]]; then
            cmake_extra_flags="$cmake_extra_flags -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON"
          fi
          
          # Base command
          cmake -B build ${{ matrix.platform.flags }} ${{ matrix.config.flags }} ${cmake_extra_flags} \
            -DCMAKE_POLICY_VERSION_MINIMUM=3.5

      # 5d. Configure Other Platforms (Windows non-MSYS2, macOS - Use ccache, no explicit LTO here)
      # LTO might be enabled by default by CMake/Compiler on Release types for these platforms,
      # but we aren't explicitly forcing it here like on Linux.
      - name: Configure Standard Build (Windows/macOS)
        if: (runner.os == 'Windows' && !contains(matrix.platform.name, 'MSYS2')) || runner.os == 'macOS'
        run: |
          cmake_extra_flags=""
          # Add ccache launchers if not in a container (redundant check, but safe)
          if [[ -z "${{ matrix.platform.container }}" ]]; then
             cmake_extra_flags="$cmake_extra_flags -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache"
          fi

          # Base command
          cmake -B build ${{ matrix.platform.flags }} ${{ matrix.config.flags }} ${cmake_extra_flags} \
            -DCMAKE_POLICY_VERSION_MINIMUM=3.5
        # Use default shell for Windows/macOS (pwsh/zsh respectively) unless bash explicitly needed

      # 6. Build Project
      - name: Build
        run: |
          # Determine the build type argument for multi-config generators (like Visual Studio)
          # For single-config generators (Makefiles, Ninja), CMAKE_BUILD_TYPE is primary.
          # This handles both cases reasonably well.
          build_type_arg=""
          if [[ "${{ runner.os }}" == "Windows" && "${{ matrix.platform.name }}" != *"MSYS2"* ]]; then
            # For Visual Studio, use the config name derived from the matrix
            if [[ "${{ matrix.config.name }}" == *"Debug"* ]]; then
              build_type_arg="--config Debug"
            else # Both RelWithDebInfo configs map to RelWithDebInfo here
              build_type_arg="--config RelWithDebInfo"
            fi
          fi

          # Run the build command
          cmake --build build ${build_type_arg} --parallel # Use --parallel for faster builds