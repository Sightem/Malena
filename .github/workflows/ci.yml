# .github/workflows/ci.yml
name: CI

on: [push, pull_request]

defaults:
  run:
    shell: bash

jobs:
  build:
    name: ${{ matrix.preset.displayName }}
    runs-on: ${{ matrix.preset.os }}
    container: ${{ matrix.preset.container }}

    strategy:
      fail-fast: false
      matrix:
        # Define the matrix based on the presets you want to test in CI
        preset:
          # Windows VS2022 Presets (using vcpkg)
          - { name: windows-shared-relwithdebinfo, os: windows-2022, displayName: 'Win VS2022 Shared RelWithDebInfo' }
          - { name: windows-shared-release,        os: windows-2022, displayName: 'Win VS2022 Shared Release' }
          - { name: windows-static-relwithdebinfo, os: windows-2022, displayName: 'Win VS2022 Static RelWithDebInfo' }
          - { name: windows-static-release,        os: windows-2022, displayName: 'Win VS2022 Static Release' }

          # MSYS2 Preset (using FetchContent)
          - { name: msys2-shared-relwithdebinfo,   os: windows-2022, displayName: 'Win MSYS2 Shared RelWithDebInfo', shell: 'msys2 {0}' }
          - { name: msys2-shared-release,          os: windows-2022, displayName: 'Win MSYS2 Shared Release',      shell: 'msys2 {0}' }

          # Linux GCC Presets (using FetchContent on Ubuntu runner)
          - { name: linux-gcc-shared-relwithdebinfo, os: ubuntu-latest, displayName: 'Linux GCC Shared RelWithDebInfo' }
          - { name: linux-gcc-shared-release,        os: ubuntu-latest, displayName: 'Linux GCC Shared Release' }
          - { name: linux-gcc-static-relwithdebinfo, os: ubuntu-latest, displayName: 'Linux GCC Static RelWithDebInfo' }
          - { name: linux-gcc-static-release,        os: ubuntu-latest, displayName: 'Linux GCC Static Release' }

          # Linux Clang Presets (using FetchContent on Ubuntu runner)
          - { name: linux-clang-shared-relwithdebinfo, os: ubuntu-latest, displayName: 'Linux Clang Shared RelWithDebInfo' }
          - { name: linux-clang-shared-release,        os: ubuntu-latest, displayName: 'Linux Clang Shared Release' }

          # macOS Presets (using FetchContent)
          - { name: macos-shared-relwithdebinfo,   os: macos-latest,  displayName: 'macOS Shared RelWithDebInfo' }
          - { name: macos-shared-release,          os: macos-latest,  displayName: 'macOS Shared Release' }
          - { name: macos-static-relwithdebinfo,   os: macos-latest,  displayName: 'macOS Static RelWithDebInfo' }
          - { name: macos-static-release,          os: macos-latest,  displayName: 'macOS Static Release' }

          # Container Presets (using FetchContent)
          - { name: fedora-shared-release,         os: ubuntu-latest, container: "fedora:latest", displayName: 'Fedora Container Shared Release' }
          - { name: archlinux-shared-release,      os: ubuntu-latest, container: "archlinux:latest", displayName: 'ArchLinux Container Shared Release' }
          - { name: ubuntu-shared-release,         os: ubuntu-latest, container: "ubuntu:latest", displayName: 'Ubuntu Container Shared Release' }
          - { name: ubuntu-static-release,         os: ubuntu-latest, container: "ubuntu:latest", displayName: 'Ubuntu Container Static Release' }

    defaults:
      run:
        shell: ${{ matrix.preset.shell || 'bash' }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # --- Platform Specific Setup ---

      - name: Setup MSYS2 Environment
        if: contains(matrix.preset.name, 'msys2')
        uses: msys2/setup-msys2@v2
        with:
          msystem: mingw64
          update: true
          install: >-
            git cmake ninja pkgconf
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-freetype
            mingw-w64-x86_64-openal
            mingw-w64-x86_64-libvorbis
            mingw-w64-x86_64-flac

      - name: Set VCPKG Triplet Env Var (Windows MSVC)
        if: runner.os == 'Windows' && !contains(matrix.preset.name, 'msys2')
        run: |
          if [[ "${{ matrix.preset.name }}" == *static* ]]; then
            echo "Setting VCPKG_DEFAULT_TRIPLET=x64-windows-static"
            echo "VCPKG_DEFAULT_TRIPLET=x64-windows-static" >> $GITHUB_ENV
          else
            echo "Setting VCPKG_DEFAULT_TRIPLET=x64-windows"
            echo "VCPKG_DEFAULT_TRIPLET=x64-windows" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Setup vcpkg and Install Dependencies (Windows MSVC)
        if: runner.os == 'Windows' && !contains(matrix.preset.name, 'msys2')
        uses: lukka/run-vcpkg@v11
        with:
          # *** Removed vcpkgDirectory - Use action's default location ***
          vcpkgGitCommitId: 'b02e341c927f16d991edbd915d8ea43eac52096c'
          # runVcpkgInstall will use VCPKG_DEFAULT_TRIPLET set above
          runVcpkgInstall: true

      - name: Export VCPKG_ROOT (Windows MSVC)
        if: runner.os == 'Windows' && !contains(matrix.preset.name, 'msys2')
        # Still export it in case other steps need it, but CMake should find toolchain from env now
        run: echo "VCPKG_ROOT=${{ runner.temporary }}/vcpkg" >> $GITHUB_ENV # Note: Default path might differ slightly, but env var is key

      - name: Setup ccache (Unix)
        uses: hendrikmuhs/ccache-action@v1.2
        if: runner.os != 'Windows' && matrix.preset.container == null
        with:
          key: ccache-${{ matrix.preset.name }}-${{ runner.os }}

      - name: Install Dependencies (Ubuntu Runner)
        if: runner.os == 'Linux' && matrix.preset.container == null
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends \
            build-essential cmake ninja-build ccache git pkg-config ca-certificates \
            libgl1-mesa-dev libudev-dev libxrandr-dev libxcursor-dev libxi-dev \
            libopenal-dev libflac-dev libvorbis-dev libfreetype-dev

      - name: Install Dependencies (Fedora Container)
        if: contains(matrix.preset.name, 'fedora')
        run: |
          dnf install -y \
            gcc gcc-c++ cmake ninja-build git pkgconf ca-certificates \
            libXrandr-devel libXcursor-devel libXi-devel systemd-devel \
            flac-devel libvorbis-devel mesa-libGL-devel mesa-libEGL-devel \
            freetype-devel openal-soft-devel

      - name: Install Dependencies (ArchLinux Container)
        if: contains(matrix.preset.name, 'archlinux')
        run: |
          pacman -Syu --noconfirm
          pacman -S --noconfirm --needed \
            base-devel cmake ninja git pkgconf ca-certificates \
            libxrandr libxcursor libxi systemd \
            flac libvorbis mesa freetype2 openal

      - name: Install Dependencies (Ubuntu Container)
        if: matrix.preset.container == 'ubuntu:latest'
        run: |
          export DEBIAN_FRONTEND=noninteractive
          apt-get update -qq
          apt-get install -y --no-install-recommends \
            build-essential cmake ninja-build git pkg-config ca-certificates \
            libgl1-mesa-dev libudev-dev libxrandr-dev libxcursor-dev libxi-dev \
            libopenal-dev libflac-dev libvorbis-dev libfreetype-dev

      - name: Install Dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update --quiet
          brew install cmake ninja ccache pkg-config freetype openal-soft libvorbis flac ca-certificates

      # --- Configure Step (Unified) ---
      - name: Configure Build using Preset
        shell: bash
        run: |
          # MSYS2 Specific Setup
          if [[ "${{ runner.os }}" == "Windows" && "${{ contains(matrix.preset.name, 'msys2') }}" == "true" ]]; then
             export PATH=/mingw64/bin:$PATH
             # *** Explicitly set CMAKE_MAKE_PROGRAM for Ninja ***
             cmake_extra_args="-DCMAKE_MAKE_PROGRAM=/mingw64/bin/ninja.exe"
          else
             cmake_extra_args=""
          fi

          # Windows MSVC Specific Setup - No longer overriding toolchain file here
          # CMake should automatically find it via environment set by run-vcpkg

          # Run cmake with preset and potential extra args
          cmake --preset ${{ matrix.preset.name }} ${cmake_extra_args}

      # --- Build Step (Unified) ---
      - name: Build Project
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" && "${{ !contains(matrix.preset.name, 'msys2') }}" == "true" ]]; then
            build_type=$(echo "${{ matrix.preset.name }}" | grep -oP '(debug|release|relwithdebinfo)$' || echo "unknown")
            if [[ "$build_type" == "unknown" ]]; then
              echo "Error: Could not determine build type from preset name '${{ matrix.preset.name }}'"
              exit 1
            fi
            config_flag="--config ${build_type^}"
          else
            config_flag=""
          fi
          # Use the build preset name, which should match the configure preset name
          cmake --build --preset ${{ matrix.preset.name }} ${config_flag}

      # Optional Test Step ...