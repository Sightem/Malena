# Continuous Integration Workflow
name: CI

# Triggers the workflow on push or pull request events
on: [push, pull_request]

# Default settings for all jobs and steps
defaults:
  run:
    shell: bash # Default shell unless overridden

env:
# Global environment variables can go here
# Since MALENA_BUILD_EXAMPLES defaults to OFF, we don't build examples here
# You could set it via cmake flags if needed: -DMALENA_BUILD_EXAMPLES=ON

jobs:
  build:
    # Job name dynamically generated from the matrix values
    name: ${{ matrix.platform.name }} ${{ matrix.config.name }}
    # Runner environment based on the platform matrix
    runs-on: ${{ matrix.platform.os }}
    # Docker container, if specified in the platform matrix
    container: ${{ matrix.platform.container }}

    # Per-job default settings
    defaults:
      run:
        # Override shell for specific platforms (like MSYS2) if needed
        shell: ${{ matrix.platform.shell || 'bash' }}

    strategy:
      # Prevent canceling all jobs if one fails
      fail-fast: false
      # Define the build matrix
      matrix:
        platform:
          # --- Windows Platforms ---
          - { name: Windows VS2019, os: windows-2019 }
          - { name: Windows VS2022, os: windows-2022 }
          # Note: MSYS2 uses a specific shell invocation
          - { name: Windows MSYS2, os: windows-2022, shell: 'msys2 {0}' }
          # --- Linux Platforms ---
          - { name: Linux GCC, os: ubuntu-latest }
          - { name: Linux Clang, os: ubuntu-latest, flags: -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ }
          - { name: Ubuntu 22.04, os: ubuntu-22.04 }
          # Container-based Linux distributions
          - { name: Fedora, os: ubuntu-latest, container: "fedora:latest" }
          - { name: ArchLinux, os: ubuntu-latest, container: "archlinux:latest" }
          # --- macOS Platform ---
          - { name: macOS, os: macos-latest }

        config:
          # --- Simplified Configurations ---
          # 1. Shared Debug (for debug symbols and assertion checks, shared linking)
          - { name: Shared Debug, flags: -DBUILD_SHARED_LIBS=TRUE -DCMAKE_BUILD_TYPE=Debug }
          # 2. Shared RelWithDebInfo (optimized with debug info, shared linking, LTO enabled where applicable)
          - { name: Shared RelWithDebInfo, flags: -DBUILD_SHARED_LIBS=TRUE -DCMAKE_BUILD_TYPE=RelWithDebInfo }
          # 3. Static RelWithDebInfo (optimized with debug info, static linking, LTO enabled where applicable)
          - { name: Static RelWithDebInfo, flags: -DBUILD_SHARED_LIBS=FALSE -DCMAKE_BUILD_TYPE=RelWithDebInfo }

        # No 'exclude' needed now as the matrix only generates desired combinations

    steps:
      # 1. Checkout code
      - name: Checkout
        uses: actions/checkout@v4
        # Important: If SFML FetchContent is used, ensure submodules are NOT checked out
        # unless SFML itself has required submodules (unlikely for tagged release).
        # FetchContent handles the dependency checkout separately.

      # 2. Setup MSYS2 environment if applicable
      - name: Setup MSYS2
        if: contains(matrix.platform.name, 'MSYS2')
        uses: msys2/setup-msys2@v2
        with:
          msystem: mingw64 # Use the MinGW-w64 environment
          update: true     # Update MSYS2 packages
          install: >-      # Install necessary build tools and dependencies
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-ninja
            git
            mingw-w64-x86_64-sfml # Provide system SFML for MSYS2

      # 3. Setup ccache for faster C/C++ compilation (if not in a container or MSYS2)
      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2.17
        if: matrix.platform.container == '' && !contains(matrix.platform.name, 'MSYS2')
        with:
          key: ${{ runner.os }}-${{ matrix.platform.name }}-${{ matrix.config.name }}-ccache-${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.platform.name }}-${{ matrix.config.name }}-ccache-${{ github.ref }}-
            ${{ runner.os }}-${{ matrix.platform.name }}-${{ matrix.config.name }}-ccache-
          max-size: 1G

      # 4. Install Dependencies (specific to OS/Container)
      # We aim to use system SFML where possible to avoid FetchContent overhead during configure/build
      - name: Install Ubuntu/Debian Dependencies (SFML)
        if: runner.os == 'Linux' && matrix.platform.container == ''
        run: sudo apt-get update && sudo apt-get install -y libsfml-dev libxrandr-dev libxcursor-dev libxi-dev libudev-dev libfreetype-dev libgl1-mesa-dev libegl1-mesa-dev # Ensure all SFML dependencies are also present

      # MSYS2 SFML installed in step 2

      - name: Install Fedora Dependencies (SFML)
        if: matrix.platform.container == 'fedora:latest'
        run: |
          dnf install -y gcc gcc-c++ cmake make git \
            SFML-devel # Install SFML dev package

      - name: Install ArchLinux Dependencies (SFML)
        if: matrix.platform.container == 'archlinux:latest'
        run: |
          pacman -Syu --noconfirm
          pacman -S --noconfirm base-devel cmake git sfml # Install SFML package

      - name: Install macOS Dependencies (SFML)
        if: runner.os == 'macOS'
        run: |
          brew install sfml # Install SFML via Homebrew

      # 5. Configure CMake Build (Conditional Logic)
      #    We add -DMALENA_USE_SYSTEM_SFML=ON where we installed it system-wide

      # 5a. Configure MSYS2 (Use system SFML, No LTO, Ninja generator)
      - name: Configure MSYS2 Build
        if: contains(matrix.platform.name, 'MSYS2')
        run: |
          cmake -G "Ninja" -B build ${{ matrix.config.flags }} \
            -DMALENA_USE_SYSTEM_SFML=ON \
            -DCMAKE_POLICY_VERSION_MINIMUM=3.14

      # 5b. Configure Linux Host Builds (Use system SFML, Use ccache, add LTO for RelWithDebInfo)
      - name: Configure Linux Host Build
        if: runner.os == 'Linux' && matrix.platform.container == '' && !contains(matrix.platform.name, 'MSYS2')
        run: |
          cmake_extra_flags="-DMALENA_USE_SYSTEM_SFML=ON"
          if [[ "${{ matrix.config.name }}" == *"RelWithDebInfo"* ]]; then
            cmake_extra_flags="$cmake_extra_flags -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON"
          fi
          cmake_extra_flags="$cmake_extra_flags -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache"

          cmake -B build ${{ matrix.platform.flags }} ${{ matrix.config.flags }} ${cmake_extra_flags} \
            -DCMAKE_POLICY_VERSION_MINIMUM=3.14

      # 5c. Configure Linux Container Builds (Use system SFML, No ccache, add LTO for RelWithDebInfo)
      - name: Configure Linux Container Build
        if: runner.os == 'Linux' && matrix.platform.container != ''
        run: |
          cmake_extra_flags="-DMALENA_USE_SYSTEM_SFML=ON"
          if [[ "${{ matrix.config.name }}" == *"RelWithDebInfo"* ]]; then
            cmake_extra_flags="$cmake_extra_flags -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON"
          fi

          cmake -B build ${{ matrix.platform.flags }} ${{ matrix.config.flags }} ${cmake_extra_flags} \
            -DCMAKE_POLICY_VERSION_MINIMUM=3.14

      # 5d. Configure Standard Build (Windows VS / macOS)
      #     Windows VS: Use FetchContent for SFML (no easy system package manager)
      #     macOS: Use system SFML from Homebrew
      - name: Configure Standard Build (Windows/macOS)
        if: (runner.os == 'Windows' && !contains(matrix.platform.name, 'MSYS2')) || runner.os == 'macOS'
        run: |
          cmake_extra_flags=""
          # Use system SFML on macOS, FetchContent on Windows VS
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            cmake_extra_flags="$cmake_extra_flags -DMALENA_USE_SYSTEM_SFML=ON"
            # Add ccache launchers for macOS
             cmake_extra_flags="$cmake_extra_flags -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache"
          else # Windows VS
             cmake_extra_flags="$cmake_extra_flags -DMALENA_USE_SYSTEM_SFML=OFF"
          fi

          cmake -B build ${{ matrix.platform.flags }} ${{ matrix.config.flags }} ${cmake_extra_flags} \
            -DCMAKE_POLICY_VERSION_MINIMUM=3.14
        # Use default shell for Windows/macOS (pwsh/zsh respectively)

      # 6. Build Project
      - name: Build
        run: |
          build_type_arg=""
          if [[ "${{ runner.os }}" == "Windows" && "${{ matrix.platform.name }}" != *"MSYS2"* ]]; then
            if [[ "${{ matrix.config.name }}" == *"Debug"* ]]; then
              build_type_arg="--config Debug"
            else
              build_type_arg="--config RelWithDebInfo"
            fi
          fi
          # Run the build command
          cmake --build build ${build_type_arg} --parallel

      # 7. Upload Build Artifacts (NEW STEP)
      - name: Upload Build Artifacts
        if: success() # Only upload if build succeeded
        uses: actions/upload-artifact@v4
        with:
          # Create a unique name for the artifact based on the job matrix
          name: build-${{ matrix.platform.name }}-${{ matrix.config.name }}
          path: |
            build/lib* # Catches build/lib (Unix static/shared), build/libs (some generators)
            build/bin # Catches DLLs on Windows, potential executables
            build/src/*.a # Possible location for static libs
            build/src/*.lib # Possible location for static libs (Windows)
            build/src/*.so # Possible location for shared libs
            build/src/*.dylib # Possible location for shared libs (macOS)
            build/src/*.dll # Possible location for shared libs (Windows)
            # You might need to refine these paths based on where libraries
            # actually appear for different generators/platforms after a test run.
            # Using wildcards like lib* helps catch variations.